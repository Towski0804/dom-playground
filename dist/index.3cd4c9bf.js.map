{"mappings":"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","sources":["<anon>","src/dom.js"],"sourcesContent":["var $74aebeb5449e6ba2$exports = {};\nwindow.dom = {\n    create (string) {\n        const container = document.createElement(\"template\");\n        container.innerHTML = string.trim();\n        return container.children[0];\n    },\n    after (node, node2) {\n        node.parentNode.insertBefore(node2, node.nextSibling);\n    },\n    before (node, node2) {\n        node.parentNode.insertBefore(node2, node);\n    },\n    append (parent, node) {\n        parent.appendChild(node);\n    },\n    wrap (node, parent) {\n        dom.before(node, parent);\n        dom.append(parent, node);\n    },\n    remove (node) {\n        node.parentNode.removeChild(node);\n        return node;\n    },\n    // deletion\n    empty (node) {\n        // same function as the new line\n        // const childNodes = node.childNodes;\n        const { childNodes: childNodes  } = node;\n        const array = [];\n        let firstChild = node.firstChild;\n        while(firstChild){\n            array.push(dom.remove(firstChild));\n            firstChild = node.firstChild;\n        }\n        return array;\n    },\n    // manipulation\n    attr (node, name, value) {\n        if (arguments.length === 3) node.setAttribute(name, value);\n        else if (arguments.length === 2) //function overloading\n        return node.getAttribute(name);\n    },\n    text (node, string) {\n        if (arguments.length === 2) {\n            // overloading\n            if (`innerText` in node) // this is for ie\n            node.innerText = string;\n            else //this is for firfox and chrome\n            node.textContent = string;\n        } else if (arguments.length === 1) {\n            if (`innerText` in node) // this is for ie\n            return node.innerText;\n            else //this is for firfox and chrome\n            return node.textContent;\n        }\n    },\n    html (node, string) {\n        // overloading\n        if (arguments.length === 2) node.innerHTML = string;\n        else if (arguments.length === 1) return node.innerHTML;\n    },\n    style (node, name, value) {\n        // dom.style(div, 'color', 'red')\n        if (arguments.length === 3) node.style[name] = value;\n        else if (arguments.length === 2) {\n            // dom.style(div, 'color') check style\n            if (typeof name === \"string\") return node.style[name];\n            else if (name instanceof Object) {\n                // dom.style(div, 'color: red') change style\n                const object = name;\n                for(let key in object)node.style[key] = object[key];\n            }\n        }\n    },\n    class: {\n        add (node, className) {\n            node.classList.add(className);\n        },\n        remove (node, className) {\n            node.classList.remove(className);\n        },\n        has (node, className) {\n            return node.classList.contains(className);\n        }\n    },\n    on (node, event, func) {\n        node.addEventListener(event, func);\n    },\n    off (node, event, func) {\n        node.removeEventListener(event, func);\n    },\n    // search\n    find (selector, scope) {\n        return (scope || document).querySelectorAll(selector);\n    },\n    parent (node) {\n        return node.parentNode;\n    },\n    children (node) {\n        return node.children;\n    },\n    siblings (node) {\n        return Array.from(node.parentNode.children).filter((n)=>n !== node);\n    },\n    next (node) {\n        let x = node.nextSibling;\n        while(x && x.nodeType === 3)x = x.nextSibling;\n        return x;\n    },\n    previous (node) {\n        let x = node.previousSibling;\n        while(x && x.nodeType === 3)x = x.previousSibling;\n        return x;\n    },\n    each (nodeList, fn) {\n        for(let i = 0; i < nodeList.length; i++)// fn(nodeList[i]);\n        fn.call(null, nodeList[i]);\n    },\n    index (node) {\n        const nodeList = dom.children(node.parentNode);\n        for(let i = 0; i < nodeList.length; i++){\n            if (nodeList[i] === node) return i;\n        }\n    }\n};\n\n\n//# sourceMappingURL=index.3cd4c9bf.js.map\n","window.dom = {\n  create(string) {\n    const container = document.createElement(\"template\");\n    container.innerHTML = string.trim();\n    return container.children[0];\n  },\n  after(node, node2) {\n    node.parentNode.insertBefore(node2, node.nextSibling);\n  },\n  before(node, node2) {\n    node.parentNode.insertBefore(node2, node);\n  },\n  append(parent, node) {\n    parent.appendChild(node);\n  },\n  wrap(node, parent) {\n    dom.before(node, parent);\n    dom.append(parent, node);\n  },\n  remove(node) {\n    node.parentNode.removeChild(node);\n    return node;\n  },\n  // deletion\n  empty(node) {\n    // same function as the new line\n    // const childNodes = node.childNodes;\n    const { childNodes } = node;\n    const array = [];\n    let firstChild = node.firstChild;\n    while (firstChild) {\n      array.push(dom.remove(firstChild));\n      firstChild = node.firstChild;\n    }\n    return array;\n  },\n  // manipulation\n  attr(node, name, value) {\n    if (arguments.length === 3) {\n      node.setAttribute(name, value);\n    } else if (arguments.length === 2) {\n      //function overloading\n      return node.getAttribute(name);\n    }\n  },\n  text(node, string) {\n    if (arguments.length === 2) {\n      // overloading\n      if (`innerText` in node) {\n        // this is for ie\n        node.innerText = string;\n      } else {\n        //this is for firfox and chrome\n        node.textContent = string;\n      }\n    } else if (arguments.length === 1) {\n      if (`innerText` in node) {\n        // this is for ie\n        return node.innerText;\n      } else {\n        //this is for firfox and chrome\n        return node.textContent;\n      }\n    }\n  },\n  html(node, string) {\n    // overloading\n    if (arguments.length === 2) {\n      node.innerHTML = string;\n    } else if (arguments.length === 1) {\n      return node.innerHTML;\n    }\n  },\n  style(node, name, value) {\n    // dom.style(div, 'color', 'red')\n    if (arguments.length === 3) {\n      node.style[name] = value;\n    } else if (arguments.length === 2) {\n      // dom.style(div, 'color') check style\n      if (typeof name === \"string\") {\n        return node.style[name];\n      } else if (name instanceof Object) {\n        // dom.style(div, 'color: red') change style\n        const object = name;\n        for (let key in object) {\n          node.style[key] = object[key];\n        }\n      }\n    }\n  },\n  class: {\n    add(node, className) {\n      node.classList.add(className);\n    },\n    remove(node, className) {\n      node.classList.remove(className);\n    },\n    has(node, className) {\n      return node.classList.contains(className);\n    },\n  },\n  on(node, event, func) {\n    node.addEventListener(event, func);\n  },\n  off(node, event, func) {\n    node.removeEventListener(event, func);\n  },\n  // search\n  find(selector, scope) {\n    return (scope || document).querySelectorAll(selector);\n  },\n  parent(node) {\n    return node.parentNode;\n  },\n  children(node) {\n    return node.children;\n  },\n  siblings(node) {\n    return Array.from(node.parentNode.children).filter((n) => n !== node);\n  },\n  next(node) {\n    let x = node.nextSibling;\n    while (x && x.nodeType === 3) {\n      x = x.nextSibling;\n    }\n    return x;\n  },\n  previous(node) {\n    let x = node.previousSibling;\n    while (x && x.nodeType === 3) {\n      x = x.previousSibling;\n    }\n    return x;\n  },\n  each(nodeList, fn) {\n    for (let i = 0; i < nodeList.length; i++) {\n      // fn(nodeList[i]);\n      fn.call(null, nodeList[i]);\n    }\n  },\n  index(node) {\n    const nodeList = dom.children(node.parentNode);\n    for (let i = 0; i < nodeList.length; i++) {\n      if (nodeList[i] === node) {\n        return i;\n      }\n    }\n  },\n};\n"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","children","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","array","firstChild","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","key","object","class","add","className","classList","has","contains","on","event","func","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","siblings","Array","from","filter","n","next","x","nodeType","previous","previousSibling","each","nodeList","fn","i","call","index"],"version":3,"file":"index.3cd4c9bf.js.map"}